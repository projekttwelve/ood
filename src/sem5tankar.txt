Checked eller Unchecked Exceptions?



  checked så måste felet fångas.(bruten affärsregel)

  unchecked behöver inte fångas(o)

  Namn som beskriver felet.
    Banksystem:
      overDrawnException
      NoSuchAccountExpcetion
      etc...
    
    iband så kan man gruppa ihop massa exceptions
    för att inte få för mångaunchecked
    
    använd alltid exceptions vid fel.
    använd endast undantag vid fel.

    lager måste lämna ifrån sig relevant information
    till andra lager, man får inte tex lämna ifrån sig
    en exception som skett i integration som har en
    jättekomplicerad exception till vyn, utan controllern
    kan då översätta detta och skicka relevant info itll vyn.


    inkludera infromaton om feleto.
    
    Skriv Javadoc
      @throws 

    om undatag kasta ska inget ändras, asså objekt och sånt.
      -gör immutible
      -kolla parametrar först.
   
    ignorera aldrig ett undantag. 

    mdeddela anvädnaren
    
    loggning
    
    

    

övning:
  1. NetworkConnectionException (unchecked)
  2. NoSuchArtikleNrException   (checked)
  3. UsernameTakenException     (checked)

  övning:
  1. "Network Connection Error", "cOuld not establish conecction on port bla bla bla, ip.."
  3. "Username Already exits, you'll have to pick another one". "User already existed in our database"

  övning:
  1. @throws ConeectionExcriton
      if unable to connect to server
      ip-adress, no response

  3. @throws UsernameTakenException
     if username is taken... ...


  övning5:
    vad ska vi testa innan vi gör det metoden ska göra?
    denna metod ska returnarar char på position index
    public char CharAT(String source, int index){

  }
    kolla om index < source.length()
    kollar om index < 0

övning6:
  till user:
    "could not perform booking, network problem"
  till programmerar:
    "could not establish connection to  111.111.111.111"
    
  

Polymorphism:
  Extract public interface
  det som händer när man bryter ut det publika gränssnittet
  man skapar ett interface och kör in alla metoder där och sedan
  så ber man classen där de kom ifrån att implementera vårt
  nya interface
  är att det blir helt frånkopplat från implementationen.
  
  Interface:
    är en samling metoder.
  @Override vid en metod:
    säger till kompliatorn att metoden som har
    en @Override över sig måste implementera
    en funktion från ett interface

  Det man kan göra sedan är att byta implementation


Observer:
  en klass ska få reda på att något hänt i en 
  annan klass.

 ObservedClass:q

